<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>#Nextjs &#8211; HippoBlog</title>
	<atom:link href="https://blog.hippohack.me/hashtag/nextjs/feed" rel="self" type="application/rss+xml" />
	<link>https://blog.hippohack.me</link>
	<description>Web開発に関する備忘録や日々の雑記ブログ</description>
	<lastBuildDate>Sun, 09 Jul 2023 11:59:14 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.7.13</generator>

<image>
	<url>https://blog.hippohack.me/_cms/wp-content/uploads/2021/03/image.jpg</url>
	<title>#Nextjs &#8211; HippoBlog</title>
	<link>https://blog.hippohack.me</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">190967550</site>	<item>
		<title>Next.js x Notion で JAMSTACK するときの備忘録</title>
		<link>https://blog.hippohack.me/web/248</link>
		
		<dc:creator><![CDATA[@hippohack]]></dc:creator>
		<pubDate>Sat, 08 Jul 2023 19:53:40 +0000</pubDate>
				<guid isPermaLink="false">https://blog.hippohack.me/?post_type=web&#038;p=248</guid>

					<description><![CDATA[NotionをCMS代わりに利用して、Next.js でのサイト構築方法の相談があったので経験がなかったのでひとまず触ってみたときの備忘録です。 基礎的なことにしか触れてはいないと思います。 そもそも Notion を使 [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>NotionをCMS代わりに利用して、Next.js でのサイト構築方法の相談があったので経験がなかったのでひとまず触ってみたときの備忘録です。</p>
<p>基礎的なことにしか触れてはいないと思います。</p>
<p>そもそも Notion を使うのもこれが初めて。</p>
<h2>インテグレーションを追加</h2>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1024x605.png" alt="" width="1024" height="605" class="aligncenter size-large wp-image-249" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523.png 1536w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523.png 1570w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<ul>
<li><code>secret_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code> なかんじのトークンが発行される</li>
</ul>
<h2>適当なテーブルを作成</h2>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-29-59-1024x404.png" alt="" width="1024" height="404" class="aligncenter size-large wp-image-250" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-29-59.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-29-59.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-29-59.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-29-59.png 1536w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-29-59.png 2048w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<ul>
<li>リンクをコピーから ID を取り出しておく。
<ul>
<li>もしブラウザで開いていればURLにもある</li>
</ul>
</li>
</ul>
<h2>コネクトを追加</h2>
<p>さっき追加したインテグレーションを選択する。</p>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1-1024x971.png" alt="" width="1024" height="971" class="aligncenter size-large wp-image-252" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1.png 1536w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/0f7ebd71107cab47df29e0d5cedab523-1.png 1778w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<h2>記事にあたるノートを書く</h2>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48-1024x364.png" alt="" width="1024" height="364" class="aligncenter size-large wp-image-253" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48.png 1536w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48.png 2048w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-07-03-19-48.png 3000w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<p>記事の内容は AI に書いてもらった。</p>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-13-42-1024x640.png" alt="" width="1024" height="640" class="aligncenter size-large wp-image-254" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-13-42.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-13-42.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-13-42.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-13-42.png 1536w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-13-42.png 2048w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<h2>APIで記事を取得</h2>
<ul>
<li>
<p>SDK を使う</p>
<ul>
<li><a href="https://github.com/makenotion/notion-sdk-js">makenotion/notion-sdk-js: Official Notion JavaScript Client</a></li>
</ul>
</li>
</ul>
<pre><code>yarn add @notionhq/client
</code></pre>
<h3>.env 追加</h3>
<pre><code>NOTION_SECRET=インテグレーション追加したときに発行されたトークンを書く
NOTION_DATABASE_ID=さっき取り出したDBのIDを書く
</code></pre>
<h3>コード</h3>
<p>たぶんやらなくていいことまでやってそうだけど。</p>
<pre><code># pages/news/index.tsx

    import { Client } from "@notionhq/client";
    import { QueryDatabaseResponse } from "@notionhq/client/build/src/api-endpoints";
    import { useEffect, useState } from "react";

    const notion = new Client({
        auth: process.env.NOTION_SECRET,
    });

    export default function NewsList() {
        const [data, setData] = useState&lt;null | QueryDatabaseResponse&gt;(null);

        const get = async () =&gt; {
            const res = await notion.databases.query({
                database_id: process.env.NOTION_DATABASE_ID || "",
                filter: {
                    and: [
                        {
                            property: "published",
                            checkbox: {
                                equals: true,
                            },
                        },
                        {
                            property: "category",
                            multi_select: {
                                contains: "news",
                            },
                        },
                    ],
                },
                sorts: [
                    {
                        property: "date",
                        direction: "descending",
                    },
                ],
            });
            console.log({ res });
            setData(res);
        };

        useEffect(() =&gt; {
            get().then((res) =&gt; {
                console.log({ res });
            });
        }, []);

        return &lt;div&gt;hoge&lt;/div&gt;;
    }
</code></pre>
<p>→ でこれレンダリングしてみると、<strong>CORS でひっかかる</strong>。。</p>
<ul>
<li><a href="https://zenn.dev/yoshio25/articles/9a27d4c75e3a16">[Next.js] API リクエストの CORS エラーを回避する</a></li>
<li><a href="https://github.com/makenotion/notion-sdk-js/issues/408">has been blocked by CORS · Issue #408 · makenotion/notion-sdk-js</a></li>
</ul>
<p>調べてみたけど、結果的にはちゃんと Next.js の作法に乗っかれば解決する。</p>
<h2>作法にしたがって修正してみる</h2>
<p>型は適当にしかつけてません🙇🙇🙇</p>
<h3>記事リスト</h3>
<pre><code># pages/news/index.tsx

    import { Client } from "@notionhq/client";

    const notion = new Client({
        auth: process.env.NOTION_SECRET,
    });

    export async function getStaticProps() {
        try {
            const database = await notion.databases.query({
                database_id: process.env.NOTION_DATABASE_ID || "",
                filter: {
                    and: [
                        {
                            property: "published",
                            checkbox: {
                                equals: true,
                            },
                        },
                        {
                            property: "category",
                            multi_select: {
                                contains: "news",
                            },
                        },
                    ],
                },
                sorts: [
                    {
                        property: "date",
                        direction: "descending",
                    },
                ],
            });

            return {
                props: {
                    data: database.results,
                },
            };
        } catch (error) {
            console.log("Error fetching data:", error);

            return {
                props: {
                    data: null,
                },
            };
        }
    }

    export default function NewsList({ data }: { data: Object[] }) {
        console.log({ data });

        return (
            &lt;&gt;
                {data.map((post: any) =&gt; (
                    &lt;div key={post.id}&gt;
                        &lt;a href={`/news/${post.id}`}&gt;{post.id}&lt;/a&gt;
                    &lt;/div&gt;
                ))}
            &lt;/&gt;
        );
    }
</code></pre>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-11-12-1024x497.png" alt="" width="1024" height="497" class="aligncenter size-large wp-image-255" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-11-12.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-11-12.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-11-12.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-11-12.png 1150w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<h3>記事詳細</h3>
<pre><code># pages/news/[id].tsx

    import { Client } from "@notionhq/client";

    const notion = new Client({
        auth: process.env.NOTION_SECRET,
    });

    export const getStaticPaths = async () =&gt; {
        const database = await notion.databases.query({
            database_id: process.env.NOTION_DATABASE_ID || "",
            filter: {
                and: [
                    {
                        property: "published",
                        checkbox: {
                            equals: true,
                        },
                    },
                    {
                        property: "category",
                        multi_select: {
                            contains: "news",
                        },
                    },
                ],
            },
            sorts: [
                {
                    property: "date",
                    direction: "descending",
                },
            ],
        });

        const paths = database.results.map((index) =&gt; ({
            params: {
                id: index.id,
            },
        }));

        return { paths, fallback: "blocking" };
    };

    export async function getStaticProps({ params }: { params: { id: string } }) {
        try {
            const page = await notion.blocks.children.list({
                block_id: params.id,
            });

            return {
                props: {
                    data: page.results,
                },
            };
        } catch (error) {
            console.log("Error fetching data:", error);

            return {
                props: {
                    data: null,
                },
            };
        }
    }

    export default function NewsPost({ data }: { data: Post }) {
        console.log({ data });

        return (
            &lt;&gt;
                {data.map((block: any, index: number) =&gt; {
                    if (block.heading_1) {
                        return (
                            &lt;h1 key={index}&gt;
                                {block.heading_1.rich_text[0].plain_text}
                            &lt;/h1&gt;
                        );
                    }
                    if (block.heading_2) {
                        return (
                            &lt;h2 key={index}&gt;
                                {block.heading_2.rich_text[0].plain_text}
                            &lt;/h2&gt;
                        );
                    }
                    if (block.paragraph) {
                        return (
                            &lt;p key={index}&gt;
                                {block.paragraph.rich_text[0].plain_text}
                            &lt;/p&gt;
                        );
                    }
                })}
            &lt;/&gt;
        );
    }
</code></pre>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-15-59-1024x508.png" alt="" width="1024" height="508" class="aligncenter size-large wp-image-256" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-15-59.png 1024w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-15-59.png 300w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-15-59.png 768w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-15-59.png 1536w, https://blog.hippohack.me/_cms/wp-content/uploads/2023/07/2023-07-09-04-15-59.png 1786w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<p>というかんじで。表示できた。</p>
<p>HTMLにするところはもっといいやり方がありそう。</p>
<h2>参考</h2>
<ul>
<li><a href="https://qiita.com/Yuki_Oshima/items/515d415dc663e285a64e#%E6%BA%96%E5%82%99">Notion APIとNext.jsで日記サイトを作った &#8211; Qiita</a></li>
<li>あとは、ChatGPTさんに聞いたりした</li>
</ul>
]]></content:encoded>
					
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">248</post-id>	</item>
		<item>
		<title>WordPress Headless CMS, GraphQL, and Nextjs（丸パクリ）</title>
		<link>https://blog.hippohack.me/web/237</link>
		
		<dc:creator><![CDATA[@hippohack]]></dc:creator>
		<pubDate>Sat, 29 May 2021 12:52:49 +0000</pubDate>
				<guid isPermaLink="false">https://blog.hippohack.me/?post_type=web&#038;p=237</guid>

					<description><![CDATA[こちらの方の動画を見てめっちゃいいと思ったのでちょっと参考にさせていただいてやって見ようと思い立った。 WPのホストはローカルで。 コードはここ → colbyfayock/next-wordpress-starter: [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>こちらの方の動画を見てめっちゃいいと思ったのでちょっと参考にさせていただいてやって見ようと思い立った。</p>
<div style="text-align: center; margin-top: 20px; margin-bottom: 20px;">
  <iframe loading="lazy" width="600" height="400" src="https://www.youtube.com/embed/YZR6P6Q0tmc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>
<p>WPのホストはローカルで。</p>
<ul>
<li>コードはここ → <a href="https://github.com/colbyfayock/next-wordpress-starter">colbyfayock/next-wordpress-starter: 📝 Bring WordPress to the static world with Next.js</a></li>
</ul>
<h2>前提</h2>
<ul>
<li>WordPressがわかる</li>
<li>Next.jsがわかる</li>
<li>Gitがわかる</li>
</ul>
<h2>クローンしてくる</h2>
<p>自分は、ローカルマシン内の「_tmp」フォルダで実施。</p>
<p>なので、</p>
<pre><code>cd development/_tmp/
</code></pre>
<p>移動して、</p>
<pre><code>git clone git@github.com:colbyfayock/next-wordpress-starter.git    
</code></pre>
<p>クローンしてくる。</p>
<h2>.env.local つくる</h2>
<p>中身は、<code>WORDPRESS_GRAPHQL_ENDPOINT="http://wordpressite.com/graphql"</code></p>
<p>GraphQLのエンドポイントのURLの設定をする。</p>
<p>が、いったん中身は仮にしておいてバックエンドとなるWordPressの設定をする</p>
<h2>WordPressの設定をする</h2>
<p>楽してローカルにもともとあった検証用のWPを使う。HOSTINGER 気になるけど。</p>
<ul>
<li><a href="https://www.hostinger.jp/">The Hosting Platform Made For You &#8211; Go Online With Hostinger</a></li>
</ul>
<p>URLは、www.wpsample.test で。</p>
<p>GraphQLのプラグインを入れろと。↓ これね。</p>
<p><img src="https://blog.hippohack.me/_cms/wp-content/uploads/2021/05/5ba5f1a459c9c1df0e02d3c318a74e9d.png" alt="" width="581" height="290" class="aligncenter size-full wp-image-239" srcset="https://blog.hippohack.me/_cms/wp-content/uploads/2021/05/5ba5f1a459c9c1df0e02d3c318a74e9d.png 581w, https://blog.hippohack.me/_cms/wp-content/uploads/2021/05/5ba5f1a459c9c1df0e02d3c318a74e9d.png 300w" sizes="(max-width: 581px) 100vw, 581px" /></p>
<ul>
<li><a href="https://www.wpgraphql.com/">GraphQL API for WordPress | WPGraphQL</a> → 有効化する</li>
</ul>
<p>[WIP]🙇‍♂</p>
]]></content:encoded>
					
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">237</post-id>	</item>
	</channel>
</rss>
